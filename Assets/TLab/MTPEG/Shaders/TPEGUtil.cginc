#pragma once

/**
* TPEGUtil.cginc
*/

#include "TPEGCommon.cginc"

static const float DCTv8matrix[] = {
	0.3535533905932738f,  0.4903926402016152f,  0.4619397662556434f,  0.4157348061512726f,  0.3535533905932738f,  0.2777851165098011f,  0.1913417161825449f,  0.0975451610080642f,
	0.3535533905932738f,  0.4157348061512726f,  0.1913417161825449f, -0.0975451610080641f, -0.3535533905932737f, -0.4903926402016152f, -0.4619397662556434f, -0.2777851165098011f,
	0.3535533905932738f,  0.2777851165098011f, -0.1913417161825449f, -0.4903926402016152f, -0.3535533905932738f,  0.0975451610080642f,  0.4619397662556433f,  0.4157348061512727f,
	0.3535533905932738f,  0.0975451610080642f, -0.4619397662556434f, -0.2777851165098011f,  0.3535533905932737f,  0.4157348061512727f, -0.1913417161825450f, -0.4903926402016153f,
	0.3535533905932738f, -0.0975451610080641f, -0.4619397662556434f,  0.2777851165098009f,  0.3535533905932738f, -0.4157348061512726f, -0.1913417161825453f,  0.4903926402016152f,
	0.3535533905932738f, -0.2777851165098010f, -0.1913417161825452f,  0.4903926402016153f, -0.3535533905932733f, -0.0975451610080649f,  0.4619397662556437f, -0.4157348061512720f,
	0.3535533905932738f, -0.4157348061512727f,  0.1913417161825450f,  0.0975451610080640f, -0.3535533905932736f,  0.4903926402016152f, -0.4619397662556435f,  0.2777851165098022f,
	0.3535533905932738f, -0.4903926402016152f,  0.4619397662556433f, -0.4157348061512721f,  0.3535533905932733f, -0.2777851165098008f,  0.1913417161825431f, -0.0975451610080625f
};

static const int ZigZagIndexInvert[] = {
	 0,  1,  8, 16,  9,  2,  3, 10,
	17, 24, 32, 25, 18, 11,  4,  5,
	12, 19, 26, 33, 40, 48, 41, 34,
	27, 20, 13,  6,  7, 14, 21, 28,
	35, 42, 49, 56, 57, 50, 43, 36,
	29, 22, 15, 23, 30, 37, 44, 51,
	58, 59, 52, 45, 38, 31, 39, 46,
	53, 60, 61, 54, 47, 55, 62, 63
};

static const int ForwardQuantizationTable50Luminance[] = {	// 50% COMPRESSION
	 16,  11,  10,  16,  24,  40,  51,  61,
	 12,  12,  14,  19,  26,  58,  60,  55,
	 14,  13,  16,  24,  40,  57,  69,  56,
	 14,  17,  22,  29,  51,  87,  80,  62,
	 18,  22,  37,  56,  68, 109, 103,  77,
	 24,  35,  55,  64,  81, 104, 113,  92,
	 49,  64,  78,  87, 103, 121, 120, 101,
	 72,  92,  95,  98, 112, 100, 103,  99
};

static const int ForwardQuantizationTable50Chrominance[] = {
	17, 18, 42, 47, 99, 99, 99, 99,
	18, 21, 26, 66, 99, 99, 99, 99,
	24, 26, 56, 99, 99, 99, 99, 99,
	47, 66, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99
};

/*
*  R = Y + 1.402 * Cr
*  G = Y - 0.714 * Cr - 0.344 * Cb
*  B = Y + 1.772 * Cb
*/
inline float Conv2R(float y, float cr) {
	return PIXEL_MAX_VALUES_INV * (y + 1.402f * (cr - 128.0f));
}

inline float Conv2G(float y, float cr, float cb) {
	return PIXEL_MAX_VALUES_INV * (y - 0.7141f * (cr - 128.0f) - 0.3441f * (cb - 128.0f));
}

inline float Conv2B(float y, float cb) {
	return PIXEL_MAX_VALUES_INV * (y + 1.772f * (cb - 128.0f));
}

/**
*  negative values are usually expressed in two's complement.
*  so convert from two's complement representation to signed binary.
*/

#define INT2BIT 32

inline float SignedInt2Float(int signed_int, int quantization) {
	int sign = signed_int < 0;

	uint signed_bit_pos = 1 << (INT2BIT - 1);
	uint sign_bit = (uint)(sign * signed_bit_pos);
	uint abs_value = (uint)signed_int - sign_bit;

	return (float)abs_value * quantization * (1 - sign * 2);
}